buildscript {
	repositories {
		maven { url 'https://maven.quiltmc.org/repository/release' }
	}

	dependencies {
		classpath libs.quilt.parsers.json
	}
}

import org.quiltmc.parsers.json.JsonReader
import org.quiltmc.parsers.json.JsonWriter

import java.nio.file.Files

plugins {
    id 'maven-publish'
	id 'org.jetbrains.gradle.plugin.idea-ext' version '1.1.6'
    alias libs.plugins.fabric.loom
}

base {
    archivesName = project.archives_base_name
}

version = "$project.version+${libs.versions.minecraft.get()}"
group = project.maven_group

allprojects {

    processResources {
        inputs.properties 'version': version

        filesMatching('fabric.mod.json') {
            expand 'version': version
        }
    }
}

allprojects {

    apply plugin: 'fabric-loom'

    repositories {
		maven {
			name "QuiltMC"
			url "https://maven.quiltmc.org/repository/release"
		}
    }

    // All the dependencies are declared at gradle/libs.version.toml and referenced with "libs.<id>"
    // See https://docs.gradle.org/current/userguide/platforms.html for information on how version catalogs work.
    dependencies {
        minecraft libs.minecraft
		mappings(loom.layered {
			officialMojangMappings()
			mappings variantOf(libs.quilt.mappings) { classifier "intermediary-v2" }
		})

		modImplementation libs.fabric.loader

		implementation libs.yumi.commons

        modImplementation libs.fabric.api
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.encoding = 'UTF-8'
        // Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
        it.options.release = 17
    }

	def generateFmj = tasks.register("generateFmj", GenerateFMJ) {
		it.inputDir.set(project.file("fmj_resources/"))
		it.outputDir.set(project.file("build/generated/generated_resources/"))
		it.projectId.set(project.name.replace("-", "_"))
		it.fabricLoaderVersion.set(libs.versions.fabric.loader.get())
		it.fabricApiVersion.set(libs.versions.fabric.api.get())
		it.minecraftVersion.set(libs.versions.minecraft.get())
		it.javaVersion.set(libs.versions.java.get())
	}

	sourceSets {
		main {
			resources {
				srcDir generateFmj
			}
		}
	}

    java {
        // Still required by IDEs such as Eclipse and Visual Studio Code
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17

        withSourcesJar()
        // withJavadocJar()
    }

	sourcesJar {
		dependsOn(generateFmj)
	}
}

subprojects {
    afterEvaluate {
        // Disable the gen sources task on sub projects
        genSourcesWithVineflower.enabled = false
        genSourcesWithFernFlower.enabled = false
        genSourcesWithCfr.enabled = false
    }
}

// If you plan to use a different file for the license, don't forget to change the file name here!
jar {
    from('LICENSE.md') {
        rename { "${it}_${base.archivesName.get()}" }
    }
}

dependencies {
	include libs.yumi.commons.core
	include libs.yumi.commons.collections
	include libs.yumi.commons.event

	include libs.quilt.parsers.json

	api include(project(":mmodding-block"))
	api include(project(":mmodding-block-entity"))
	api include(project(":mmodding-config"))
	api include(project(":mmodding-core"))
	api include(project(":mmodding-fluid"))
	api include(project(":mmodding-item"))
	api include(project(":mmodding-java"))
	api include(project(":mmodding-math"))
	api include(project(":mmodding-worldgen"))
}

afterEvaluate {
	def generateFmjForIdea = tasks.register("generateFmjForIdea")
	generateFmjForIdea.get().dependsOn project.tasks.named("generateFmj")
	project.subprojects.each {
		generateFmjForIdea.get().dependsOn it.tasks.named("generateFmj")
	}

	idea {
		project {
			settings {
				taskTriggers {
					afterSync generateFmjForIdea.get()
				}
			}
		}
	}
}

// Loom can detect content of generated FMJs thanks to that block code.
afterEvaluate {
	project.subprojects.each {
		project.sourceSets.main.compileClasspath += it.sourceSets.main.compileClasspath
		project.sourceSets.main.runtimeClasspath += it.sourceSets.main.runtimeClasspath
	}
}

// Configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}

abstract class GenerateFMJ extends DefaultTask {

	@InputDirectory
	abstract DirectoryProperty getInputDir()

	@OutputDirectory
	abstract DirectoryProperty getOutputDir()

	@Input
	abstract Property<String> getProjectId()

	@Input
	abstract Property<String> getFabricLoaderVersion()

	@Input
	abstract Property<String> getFabricApiVersion()

	@Input
	abstract Property<String> getMinecraftVersion()

	@Input
	abstract Property<String> getJavaVersion()

	@Override
	String getGroup() {
		return "generation"
	}

	@TaskAction
	void generateFmj() throws IOException {

		java.nio.file.Path input = this.getInputDir().getAsFile().get().toPath()

		Map<String, BufferedReader> properties = FmjBuilder.getProperties(input)

		java.nio.file.Path output = this.getOutputDir().getAsFile().get().toPath().resolve("fabric.mod.json")

		if (Files.exists(output)) {
			Files.delete(output)
		}

		String projectName = ""

		this.getProjectId().get().split("_").each {
			if (it[0] == "m" && it[1] == "m") {
				projectName = projectName + it[0].toUpperCase() + it[1].toUpperCase() + it.substring(2) + " "
			}
			else {
				projectName = projectName + it[0].toUpperCase() + it.substring(1) + " "
			}
		}

		projectName = projectName + "Library"

		String projectDescription

		if (this.getProjectId().get() == "mmodding") {
			projectDescription = "Library made by MModding Team to provide few sets of modding tools."
		}
		else {
			projectDescription = projectName - "MModding " + " of MModding"
		}

		FmjBuilder.buildFmj(
			this.getProjectId().get(),
			projectName,
			projectDescription,
			(String) project.version,
			this.getFabricLoaderVersion().get(),
			this.getFabricApiVersion().get(),
			this.getMinecraftVersion().get(),
			this.getJavaVersion().get(),
			output,
			properties,
			FmjBuilder.hasMixins(input),
			FmjBuilder.hasAccessWideners(input),
			FmjBuilder.getEnvironment(input)
		)
	}
}

final class FmjBuilder {

	static Map<String, BufferedReader> getProperties(java.nio.file.Path path) {
		Map<String, BufferedReader> properties = new HashMap<>()

		File entrypoints = path.resolve("entrypoints.json").toFile()
		if (entrypoints.exists()) {
			properties.put("entrypoints", entrypoints.newReader())
		}

		File injected_interfaces = path.resolve("injected_interfaces.json").toFile()
		if (injected_interfaces.exists()) {
			properties.put("injected_interfaces", injected_interfaces.newReader())
		}

		return properties
	}

	static boolean hasMixins(java.nio.file.Path path) {
		boolean hasMixins = false

		JsonReader reader = JsonReader.json(path.resolve("main.json"))

		reader.beginObject()

		while (reader.hasNext()) {
			if (reader.nextName() == "has_mixins") {
				hasMixins = reader.nextBoolean()
			}
			else {
				reader.skipValue()
			}
		}

		reader.close()

		return hasMixins
	}

	static boolean hasAccessWideners(java.nio.file.Path path) {
		boolean hasAccessWideners = false

		JsonReader reader = JsonReader.json(path.resolve("main.json"))

		reader.beginObject()

		while (reader.hasNext()) {
			if (reader.nextName() == "has_access_wideners") {
				hasAccessWideners = reader.nextBoolean()
			}
			else {
				reader.skipValue()
			}
		}

		reader.close()

		return hasAccessWideners
	}

	static String getEnvironment(java.nio.file.Path path) {
		String environment = "both"

		JsonReader reader = JsonReader.json(path.resolve("main.json"))

		reader.beginObject()

		while (reader.hasNext()) {
			if (reader.nextName() == "environment") {
				environment = reader.nextString()
			}
			else {
				reader.skipValue()
			}
		}

		reader.close()

		return environment
	}

	static void writeEntrypoints(JsonWriter writer, BufferedReader bufferedReader) {
		JsonReader reader = JsonReader.json(bufferedReader)

		writer.name("entrypoints")
		writer.beginObject() // Entrypoints Block Start

		reader.beginObject()
		while (reader.hasNext()) {
			writer.name(reader.nextName()).beginArray()
			reader.beginArray()
			while (reader.hasNext()) {
				writer.value(reader.nextString())
			}
			reader.endArray()
			writer.endArray()
		}
		reader.endObject()

		writer.endObject() // Entrypoints Block End

		reader.close()
	}

	static void writeInjectedInterfaces(JsonWriter writer, BufferedReader bufferedReader) {
		JsonReader reader = JsonReader.json(bufferedReader)

		writer.name("loom:injected_interfaces")
		writer.beginObject() // Fabric Loom Injected Interfaces Block Start

		reader.beginObject()
		while (reader.hasNext()) {
			writer.name(reader.nextName()).beginArray()
			reader.beginArray()
			while (reader.hasNext()) {
				writer.value(reader.nextString().replace(".", "/").replace("\u0024", "\\u0024")) // that way we avoid some errors
			}
			reader.endArray()
			writer.endArray()
		}
		reader.endObject()

		writer.endObject() // Fabric Loom Injected Interfaces Block End

		reader.close()
	}

	static void buildFmj(
		String projectId,
		String projectName,
		String projectDescription,
		String projectVersion,
		String fabricLoaderVersion,
		String fabricApiVersion,
		String minecraftVersion,
		String javaVersion,
		java.nio.file.Path fmjPath,
		Map<String, BufferedReader> fmjProperties,
		boolean hasMixins,
		boolean hasAccessWideners,
		String environment
	) throws IOException {
		JsonWriter writer = JsonWriter.json(fmjPath)

		// Starting by Writing the Basics
		writer.beginObject()
			.name("schemaVersion").value(1)
			.name("id").value(projectId)
			.name("version").value(projectVersion)
			.name("name").value(projectName)
			.name("description").value(projectDescription)
			.name("authors")
			.beginArray() // Authors Start
				.value("MModding Team")
			.endArray() // Authors End
			.name("contributors")
			.beginArray() // Contributors Start
				.value("FirstMegaGame4")
			.endArray() // Contributors End
			.name("contacts")
			.beginObject() // Contacts Start
				.name("homepage").value("https://mmodding.com")
				.name("sources").value("https://github.com/mmodding-library")
				.name("issues").value("https://github.com/mmodding-library/issues")
			.endObject() // Contacts End
			.name("license").value("Code: PolyForm-Shield-1.0.0\\nAssets: All Rights Reserved")
			.name("icon").value("assets/" + projectId + "/icon.png")
			.name("environment").value(environment.replace("both", "*"))
			.name("depends")
			.beginObject() // Depends Block Start
				.name("fabricloader").value(">=" + fabricLoaderVersion)
				.name("fabric-api").value(">=" + fabricApiVersion)
				.name("minecraft").value("~" + minecraftVersion)
				.name("java").value(">=" + javaVersion)
			.endObject() // Depends Block End
			.name("provides")
			.beginArray() // Provides Block Start

		if (projectId != "mmodding") {
			writer.value(projectId.replace("_", "-"))
		}

		writer.value(projectId + "_library")
				.value(projectId.replace("_", "-") + "-library")
				.value(projectId + "_api")
				.value(projectId.replace("_", "-") + "-api")
			.endArray() // Provides Block End

		if (fmjProperties.containsKey("entrypoints")) {
			writeEntrypoints(writer, fmjProperties.get("entrypoints"))
		}

		if (hasMixins) {
			writer.name("mixins")
				.beginArray() // Mixins Block Start
					.value(projectId + ".mixins.json")
				.endArray() // Mixins Block End
		}

		if (hasAccessWideners) {
			writer.name("accessWidener").value(projectId + ".accesswidener")
		}

		writer.name("custom")
			.beginObject() // Custom Block Start

		if (fmjProperties.containsKey("injected_interfaces")) {
			writeInjectedInterfaces(writer, fmjProperties.get("injected_interfaces"))
		}

		writer.name("modmenu")
			.beginObject() // ModMenu Block Start
				.name("badges")
				.beginArray()
					.value("library")
				.endArray()
				.name("parent")
					.beginObject() // ModMenu Parent Block Start
						.name("id").value("mmodding")
						.name("name").value("MModding Library")
						.name("description").value("Library made by MModding Team to provide few sets of modding tools.")
						.name("icon").value("assets/" + projectId + "/icon.png")
						.name("badges")
						.beginArray()
							.value("library")
						.endArray()
					.endObject() // ModMenu Parent Block End
			.endObject() // ModMenu Block End

		writer.endObject() // Custom Block End

		// Ending
		writer.endObject()
		writer.flush()
		writer.close()
	}
}
